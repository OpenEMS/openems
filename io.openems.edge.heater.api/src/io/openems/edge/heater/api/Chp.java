package io.openems.edge.heater.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.PersistencePriority;
import io.openems.common.channel.Unit;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.BooleanReadChannel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.IntegerReadChannel;
import io.openems.edge.common.channel.LongReadChannel;
import io.openems.edge.common.channel.value.Value;
import org.osgi.annotation.versioning.ProviderType;

/**
 * Generalized nature for Combined Heat and Power devices which can be
 * monitored. As there are currently no hydrogen natures, the `Chp` nature can
 * be used. Both provide heat end electrical power.
 */
@ProviderType
public interface Chp extends Heater {

    enum ChannelId implements io.openems.edge.common.channel.ChannelId {

	/**
	 * Electric power generated by the Chp at the moment.
	 *
	 * <ul>
	 * <li>Interface: Chp
	 * <li>Type: Integer
	 * <li>Unit: Watt
	 * </ul>
	 */
	ELECTRIC_PRODUCTION_POWER(Doc.of(OpenemsType.INTEGER) //
		.unit(Unit.WATT) //
		.persistencePriority(PersistencePriority.HIGH) //
		.accessMode(AccessMode.READ_ONLY)), //

	/**
	 * Maximum electric power generated by the Chp at the moment.
	 *
	 * <ul>
	 * <li>Interface: Chp
	 * <li>Type: Integer
	 * <li>Unit: Watt
	 * </ul>
	 */
	MAX_ELECTRIC_PRODUCTION_POWER(Doc.of(OpenemsType.INTEGER) //
		.unit(Unit.WATT) //
		.persistencePriority(PersistencePriority.HIGH) //
		.accessMode(AccessMode.READ_ONLY)), //

	/**
	 * Minimum electric power generated by the Chp at the moment.
	 *
	 * <ul>
	 * <li>Interface: Chp
	 * <li>Type: Integer
	 * <li>Unit: Watt
	 * </ul>
	 */
	MIN_ELECTRIC_PRODUCTION_POWER(Doc.of(OpenemsType.INTEGER) //
		.unit(Unit.WATT) //
		.persistencePriority(PersistencePriority.HIGH) //
		.accessMode(AccessMode.READ_ONLY)), //

	/**
	 * Electric energy generated by the Chp.
	 *
	 * <ul>
	 * <li>Interface: Chp
	 * <li>Type: Integer
	 * <li>Unit: Watthours
	 * </ul>
	 */
	ELECTRIC_PRODUCTION_ENERGY(Doc.of(OpenemsType.LONG) //
		.unit(Unit.WATT_HOURS) //
		.persistencePriority(PersistencePriority.HIGH) //
		.accessMode(AccessMode.READ_ONLY)), //

	/**
	 * Information about the main guiding function of the Chp, guided by HEAT (true)
	 * or by electricity (false).
	 *
	 * <ul>
	 * <li>Interface: Chp
	 * <li>Type: Boolean
	 * </ul>
	 */
	HEAT_GUIDED(Doc.of(OpenemsType.BOOLEAN) //
		.persistencePriority(PersistencePriority.HIGH) //
		.accessMode(AccessMode.READ_ONLY)), //

	;

	private final Doc doc;

	private ChannelId(Doc doc) {
	    this.doc = doc;
	}

	public Doc doc() {
	    return this.doc;
	}

    }

    /**
     * Gets the Channel for {@link ChannelId#ELECTRIC_PRODUCTION_POWER}.
     *
     * @return the Channel
     */
    default IntegerReadChannel getElectricProductionPowerChannel() {
	return this.channel(ChannelId.ELECTRIC_PRODUCTION_POWER);
    }

    /**
     * Gets the value of the electric production power in W. See
     * {@link ChannelId#ELECTRIC_PRODUCTION_POWER}.
     *
     * @return the Channel {@link Value}
     */
    default Value<Integer> getElectricProductionPower() {
	return this.getElectricProductionPowerChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on
     * {@link ChannelId#ELECTRIC_PRODUCTION_POWER} Channel.
     *
     * @param value the next value
     */
    default void _setElectricProductionPower(Integer value) {
	this.getElectricProductionPowerChannel().setNextValue(value);
    }

    /**
     * Internal method to set the 'nextValue' on
     * {@link ChannelId#ELECTRIC_PRODUCTION_POWER} Channel.
     *
     * @param value the next value
     */
    default void _setElectricProductionPower(int value) {
	this.getElectricProductionPowerChannel().setNextValue(value);
    }

    /**
     * Gets the Channel for {@link ChannelId#MAX_ELECTRIC_PRODUCTION_POWER}.
     *
     * @return the Channel
     */
    default IntegerReadChannel getMaxElectricProductionPowerChannel() {
	return this.channel(ChannelId.MAX_ELECTRIC_PRODUCTION_POWER);
    }

    /**
     * Gets the value of the maximum electric production power in W. See
     * {@link ChannelId#MAX_ELECTRIC_PRODUCTION_POWER}.
     *
     * @return the Channel {@link Value}
     */
    default Value<Integer> getMaxElectricProductionPower() {
	return this.getMaxElectricProductionPowerChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on
     * {@link ChannelId#MAX_ELECTRIC_PRODUCTION_POWER} Channel.
     *
     * @param value the next value
     */
    default void _setMaxElectricProductionPower(Integer value) {
	this.getMaxElectricProductionPowerChannel().setNextValue(value);
    }

    /**
     * Internal method to set the 'nextValue' on
     * {@link ChannelId#MAX_ELECTRIC_PRODUCTION_POWER} Channel.
     *
     * @param value the next value
     */
    default void _setMaxElectricProductionPower(int value) {
	this.getMaxElectricProductionPowerChannel().setNextValue(value);
    }

    /**
     * Gets the Channel for {@link ChannelId#MIN_ELECTRIC_PRODUCTION_POWER}.
     *
     * @return the Channel
     */
    default IntegerReadChannel getMinElectricProductionPowerChannel() {
	return this.channel(ChannelId.MIN_ELECTRIC_PRODUCTION_POWER);
    }

    /**
     * Gets the value of the minimum electric production power in W. See
     * {@link ChannelId#MIN_ELECTRIC_PRODUCTION_POWER}.
     *
     * @return the Channel {@link Value}
     */
    default Value<Integer> getMinElectricProductionPower() {
	return this.getMinElectricProductionPowerChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on
     * {@link ChannelId#MIN_ELECTRIC_PRODUCTION_POWER} Channel.
     *
     * @param value the next value
     */
    default void _setMinElectricProductionPower(Integer value) {
	this.getMinElectricProductionPowerChannel().setNextValue(value);
    }

    /**
     * Internal method to set the 'nextValue' on
     * {@link ChannelId#MIN_ELECTRIC_PRODUCTION_POWER} Channel.
     *
     * @param value the next value
     */
    default void _setMinElectricProductionPower(int value) {
	this.getMinElectricProductionPowerChannel().setNextValue(value);
    }

    /**
     * Gets the Channel for {@link ChannelId#ELECTRIC_PRODUCTION_ENERGY}.
     *
     * @return the Channel
     */
    default LongReadChannel getElectricProductionEnergyChannel() {
	return this.channel(ChannelId.ELECTRIC_PRODUCTION_ENERGY);
    }

    /**
     * Gets the value of the electric production energy in Wh. See
     * {@link ChannelId#ELECTRIC_PRODUCTION_ENERGY}.
     *
     * @return the Channel {@link Value}
     */
    default Value<Long> getElectricProductionEnergy() {
	return this.getElectricProductionEnergyChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#FLOW_TEMPERATURE}
     * Channel.
     *
     * @param value the next value
     */
    default void _setElectricProductionEnergy(Long value) {
	this.getElectricProductionEnergyChannel().setNextValue(value);
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#FLOW_TEMPERATURE}
     * Channel.
     *
     * @param value the next value
     */
    default void _setElectricProductionEnergy(long value) {
	this.getElectricProductionEnergyChannel().setNextValue(value);
    }

    /**
     * Gets the Channel for {@link ChannelId#HEAT_GUIDED}.
     *
     * @return the Channel
     */
    public default BooleanReadChannel getHeatGuidedChannel() {
	return this.channel(ChannelId.HEAT_GUIDED);
    }

    /**
     * True if the Chp is heat guided. See {@link ChannelId#HEAT_GUIDED}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Boolean> getHeatGuided() {
	return this.getHeatGuidedChannel().value();
    }

    /**
     * Internal method to set the 'nextValue' on {@link ChannelId#HEAT_GUIDED}
     * Channel.
     *
     * @param value the next value
     */
    public default void _setHeatGuided(boolean value) {
	this.getHeatGuidedChannel().setNextValue(value);
    }

}
