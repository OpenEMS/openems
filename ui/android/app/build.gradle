apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

def convertVersionStringToCode(versionString) {
    def version = versionString.split('\\-')[0]
    def parts = version.split('\\.')
    def year = parts[0]
    def month = parts[1].padLeft(2, '0')
    def day = parts[2].padLeft(2, '0')
    return "${year}${month}${day}00".toInteger()
}

def getVersion() {
    def v = System.getenv("VERSION")
    if(v == null) {
      logger.warn('WARNING: environment VERSION not specified! using `SNAPHOT` instead.')
      return [name: 'SNAPSHOT', code: 1]
    }
    def c = convertVersionStringToCode(v)
    logger.info("OpenEMS-Version: ${v}(${c})")
    return [name: v, code: c]
}

def version = getVersion();

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode version.code
        versionName version.name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
        multiDexEnabled true //important
    }

    flavorDimensions "version"
    productFlavors {
        // create("example") {
        //     applicationId  "io.example.ui"
        //     namespace "io.example.ui"
        //     dimension "version"
        // }
    }

    sourceSets {
        // example {
        //     res {
        //         srcDirs 'src/example/res'
        //     }
        //     java {
        //         srcDirs 'src/example/java'
        //     }
        // }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
