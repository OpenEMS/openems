// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        agp_version = '8.4.0'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath 'com.google.gms:google-services:4.3.15'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply from: "variables.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task bundleThemeRelease(type: DefaultTask)  {
    group 'Build'
    description 'Assembles aab for $THEME variant'

    def theme = (System.getenv('THEME') ?: 'none').toLowerCase()

    if(theme != 'none') {
    dependsOn tasks.getByPath(':app:bundle'+theme.capitalize()+'Release')
    }

    doLast {
        if (theme == 'none') {
            throw new Exception("Environment variable THEME not set!")
        }

        def source = file("app/build/outputs/bundle/"+theme+"Release/app-"+theme+"-release.aab")
        def output = file("target/"+theme+".aab")

        output.delete()
        copy {
            from source
            into output.getParentFile()
            rename (source.getName(), output.getName())
        }
        println("Built ${output}!")
    }
}

task assembleThemeRelease(type: DefaultTask)  {
    group 'Build'
    description 'Assembles apk for $THEME variant'

    def theme = (System.getenv('THEME') ?: 'none').toLowerCase()

    if(theme != 'none') {
    dependsOn tasks.getByPath(':app:assemble'+theme.capitalize())
    }

    doLast {
        if (theme == 'none') {
            throw new Exception("Environment variable THEME not set!")
        }

        def source = file("app/build/outputs/apk/"+theme+"/release/app-"+theme+"-release.apk")
        def output = file("target/"+theme+".apk")

        output.delete()
        copy {
            from source
            into output.getParentFile()
            rename (source.getName(), output.getName())
        }
        println("Built ${output}!")
    }
}

task buildThemeRelease(type: DefaultTask)  {
    group 'Build'
    description 'Build aab and apk for $THEME variant'

    dependsOn tasks.getByPath(':bundleThemeRelease')
    dependsOn tasks.getByPath(':assembleThemeRelease')
}
